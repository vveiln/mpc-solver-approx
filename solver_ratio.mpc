
# input parameters description
# 0 u1: type t11
# 1 u1: max t11 amount spent
# 2 u1: type t12
# 3 u1: ratio h1
# 4 u1: ratio w1
#
# 5 u2: type t21
# 6 u2: max t21 amount spent
# 7 u2: type t22
# 8 u2: ratio h2
# 9 u2: ratio w2

number_of_users = 2
number_of_params = 5
intent = Array(number_of_users * number_of_params, sint)


# fake ptx is just a bunch of random field elements
# each user sends a ptx along with their intent
ptx_size = 28 
ptxs = Array(number_of_users * ptx_size, sint)

# read user inputs
@for_range(number_of_users)
def _(i):
	# read intents
	@for_range(number_of_params)
	def _(j):
        	intent[number_of_params * i + j] = sint.get_input_from(i)
	#read ptxs
	@for_range(ptx_size)
	def _(j):
		ptxs[ptx_size * i + j] = sint.get_input_from(i)
	

# sanity check
print_ln('%s', ptxs[0].reveal())


# solver strategy start
# 1. check types compatibility

match_w1_h2 = intent[2] == intent[5]
match_h1_w2 = intent[0] == intent[7]

# todo check reveal
@if_e((match_w1_h2 & match_h1_w2).reveal() != True)
def _():
	return ptxs # todo: more sensible return

# 2. check ratio compatibility 
# if h1 == w2, the initial values don't need to be changed. reassign for clarity of the following computations
h1 = intent[3]
w1 = intent[4]
h2 = intent[8]
w2 = intent[9]

#todo: switch to array storing
def gcd(a, b):
	@if_e((a * b).reveal() == 0) #todo: field issues?
	def _():
		return a + b
	@else_
	def _():
		q = a // b
		r = a % b
		return gcd(b, r)

def lcm(a, b):
	return a * b / gcd(a, b)


# if h1 != w2, need to compute coefficients to make them comparable 
@if_e((h1 - w2).reveal() != 0)
def _():
        lcm_h1_w2 = lcm(h1, w2)
        coef1 = lcm_h1_w2 / h1
        coef2 = lcmh1_w2 / w2
        h1 = lcm_h1_w2
        w1 = w1 * coef1
        h2 = h2 * coef2
        w2 = lcm_h1_w2

# 3. determine values to be exchanged



# 4 compute the transaction


#print_ln('%s %s %s', match_has_wants_type.reveal(), match_has_wants_type.reveal(), match_has_wants_amount.reveal())
#print_ln('%s', match_has_wants_amount.reveal())
#print_ln('%s', .reveal())
#print_ln('%s', .reveal())

res = 0

@if_e(res.reveal())
def _():
	print_ln('intents can be matched: %s', res.reveal())
	return ptxs
@else_
def _():
	print_ln("Intents don't match")


